{
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // The meta file for a user plugin contains the information needed for ganchos to execute a plugin and display 
	// it in the UI (UI will be in future enhancement).

    // By default the extension for these types of files ends in '.meta', but this can be configured in general config.

    // NOTE: When the application (execFilePath) is executed the 3 parameters passed in are:
    //  1. The configuration for the plugin. JSON string in the shape of 'defaultConfig'
    //  2. The event type that triggered execution (if run on a schedule, this is 'none')
    //  3. The event data that is part of the triggered execution (if run on a schedule, this is null)

	// NOTE: Output to stderr from the program will be logged to the plugin log file as an error.
	// Output to stdout gets logged as information. If |*| is in the message it will be split on that and 
	// part 1 of the split string will be where in the file the message is coming from, the second part of
	// the split string will be the message itself
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //  *** Mandatory fields ***

    // The name of the execution file to run
    "execFilePath": "",

    // Name of the plugin
    "name": "",

    // Plugin description
    "description": "",

    // What category. Options can be found in 'PluginCategory' type in the code.
    // Currently the options are: 'Media' | 'Net' | 'FileSystem' | 'System'
    "category": "",

    // The type of events the plugin will listen for. These can be used even when a plugin runs on a schedule
    // type EventType = 'add' | 'addDir' | 'change' | 'unlink' | 'unlinkDir' | 'ready' | 'raw' | 'error' | 'none'
    // NOTE: This field must be defined, but can be an empty array"
    "eventTypes": [ ],

    // The configuration the plugin will start off with the first time it's run. The first time it executes this will be written
    // to the plugin configuration file and can be modified to control the plugin
    "defaultConfig": {
	    // Pause for a number of minutes before executing plugin (number can be less than 1). Defaults to 0
		"runDelayInMinutes": 0,

		// This will cause the plugin to run on a schedule, if 'isEligibleForSchedule' is true
		// The number can be fractional
		// A plugin can set this and still respond to events
		// The general config (option 'PluginWaitTimeFloorInMinutes') will prevent a plugin from being scheduled at too low of a number
		// Can't be <= 0 
		"runEveryXMinutes": 5
	},

    // *** Optional fields ***

    // When false the plugin will not be run. Defaults to true
    "enabled": true,

	// Valid options can be found here: https://nodejs.org/api/process.html#process_process_platform
	// If list is empty, plugin will run on all operation systems. Defaults to empty
	//"osRunOnly": [ 'aix', 'darwin', 'freebsd', 'linux', 'openbsd', 'sunos', 'win32' ],
	"osRunOnly": [],

    // Will allow the plugin to be run on a schedule if 'runEveryXMinutes' is a positive number. Defaults to false
    "isEligibleForSchedule": false
}